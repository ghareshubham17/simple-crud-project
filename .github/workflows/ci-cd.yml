name: Spring MVC CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  # Enhanced Build and Test Job
  build-and-test:
    name: 🏗️ Build and Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout source code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven  # Built-in Maven caching
    
    # Display project information
    - name: 📋 Display Project Info
      run: |
        echo "🚀 Starting CI/CD Pipeline for Spring MVC Application"
        echo "Java Version: $(java -version 2>&1 | head -1)"
        echo "Maven Version: $(mvn -version | head -1)"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
    
    # Validate Maven project
    - name: ✅ Validate Maven Project
      run: mvn validate
    
    # Compile the project
    - name: 🔨 Compile Project
      run: |
        echo "📦 Compiling Spring MVC application..."
        mvn clean compile -B
    
    # Run unit tests with detailed reporting
    - name: 🧪 Run Unit Tests
      run: |
        echo "🔍 Running unit tests..."
        mvn test -B
      continue-on-error: false
    
    # Generate test reports
    - name: 📊 Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()  # Run even if tests fail
      with:
        name: 'Maven Test Results'
        path: 'target/surefire-reports/*.xml'
        reporter: 'java-junit'
        fail-on-error: true
    
    # Build the application package
    - name: 📦 Build Application Package
      run: |
        echo "🏗️ Building application package..."
        mvn clean package -B -DskipTests
    
    # Display build artifacts
    - name: 📋 List Build Artifacts
      run: |
        echo "📦 Generated artifacts:"
        find target -name "*.jar" -type f -exec ls -lah {} \;
        echo "📁 Target directory contents:"
        ls -la target/
    
    # Upload build artifacts
    - name: 📤 Upload JAR Artifact
      uses: actions/upload-artifact@v4
      with:
        name: spring-mvc-jar-${{ github.run_number }}
        path: target/*.jar
        retention-days: 30
    
    # Upload test reports
    - name: 📤 Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ github.run_number }}
        path: |
          target/surefire-reports/
          target/site/jacoco/
        retention-days: 30

  # Code Quality Analysis
  code-quality:
    name: 🔍 Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout source code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 🔍 Run Code Quality Checks
      run: |
        echo "🔍 Running code quality analysis..."
        mvn clean verify -B
        echo "✅ Code quality checks completed"
    
    - name: 📊 Generate Code Coverage Report
      run: |
        mvn jacoco:report
        echo "📊 Code coverage report generated"
    
    - name: 📤 Upload Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ github.run_number }}
        path: target/site/jacoco/
        retention-days: 30

  # Security Scanning
  security-scan:
    name: 🔒 Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout source code
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 🔒 Run OWASP Dependency Check
      run: |
        echo "🔒 Running security vulnerability scan..."
        mvn org.owasp:dependency-check-maven:check -B || echo "Security scan completed with warnings"
    
    - name: 📤 Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: target/dependency-check-report.html
        retention-days: 30

  # Performance Testing (Optional)
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
    - name: 📥 Checkout source code
      uses: actions/checkout@v4
    
    - name: 📥 Download Application JAR
      uses: actions/download-artifact@v4
      with:
        name: spring-mvc-jar-${{ github.run_number }}
        path: ./app
    
    - name: ⚡ Run Performance Tests
      run: |
        echo "⚡ Starting performance testing..."
        echo "📋 Available JAR files:"
        ls -la app/
        echo "🚀 Performance testing would run here"
        echo "💡 Consider adding JMeter or Gatling tests"

  # Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Download Application JAR
      uses: actions/download-artifact@v4
      with:
        name: spring-mvc-jar-${{ github.run_number }}
        path: ./staging-deploy
    
    - name: 🚀 Deploy to Staging Environment
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "📋 Deployment artifacts:"
        ls -la staging-deploy/
        echo "🎯 Staging deployment completed successfully!"
        echo "🌐 Application URL: https://staging.yourapp.com"

  # Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security-scan]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Download Application JAR
      uses: actions/download-artifact@v4
      with:
        name: spring-mvc-jar-${{ github.run_number }}
        path: ./production-deploy
    
    - name: 🌟 Deploy to Production Environment
      run: |
        echo "🌟 Deploying to production environment..."
        echo "📋 Production deployment artifacts:"
        ls -la production-deploy/
        echo "✅ Production deployment completed successfully!"
        echo "🌐 Production URL: https://yourapp.com"

  # Notification Job
  notify-completion:
    name: 📢 Pipeline Completion Notification
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: 📢 Send Pipeline Status Notification
      run: |
        echo "📋 Pipeline Execution Summary:"
        echo "🔗 Repository: ${{ github.repository }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "👤 Triggered by: ${{ github.actor }}"
        echo "⏰ Execution time: $(date)"
        
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Production deployment: SUCCESS"
        elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "✅ Staging deployment: SUCCESS"
        else
          echo "ℹ️ Deployment: SKIPPED (not main/master branch)"
        fi
        
        echo ""
        echo "🎉 CI/CD Pipeline completed!"
        echo "📊 Check the Actions tab for detailed logs and artifacts"